/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProcessedChunkService } from "../processedChunk.service";
import { ProcessedChunkCreateInput } from "./ProcessedChunkCreateInput";
import { ProcessedChunk } from "./ProcessedChunk";
import { ProcessedChunkFindManyArgs } from "./ProcessedChunkFindManyArgs";
import { ProcessedChunkWhereUniqueInput } from "./ProcessedChunkWhereUniqueInput";
import { ProcessedChunkUpdateInput } from "./ProcessedChunkUpdateInput";

export class ProcessedChunkControllerBase {
  constructor(protected readonly service: ProcessedChunkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProcessedChunk })
  async createProcessedChunk(
    @common.Body() data: ProcessedChunkCreateInput
  ): Promise<ProcessedChunk> {
    return await this.service.createProcessedChunk({
      data: data,
      select: {
        chunk: true,
        createdAt: true,
        id: true,
        order: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProcessedChunk] })
  @ApiNestedQuery(ProcessedChunkFindManyArgs)
  async processedChunks(
    @common.Req() request: Request
  ): Promise<ProcessedChunk[]> {
    const args = plainToClass(ProcessedChunkFindManyArgs, request.query);
    return this.service.processedChunks({
      ...args,
      select: {
        chunk: true,
        createdAt: true,
        id: true,
        order: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProcessedChunk })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async processedChunk(
    @common.Param() params: ProcessedChunkWhereUniqueInput
  ): Promise<ProcessedChunk | null> {
    const result = await this.service.processedChunk({
      where: params,
      select: {
        chunk: true,
        createdAt: true,
        id: true,
        order: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProcessedChunk })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProcessedChunk(
    @common.Param() params: ProcessedChunkWhereUniqueInput,
    @common.Body() data: ProcessedChunkUpdateInput
  ): Promise<ProcessedChunk | null> {
    try {
      return await this.service.updateProcessedChunk({
        where: params,
        data: data,
        select: {
          chunk: true,
          createdAt: true,
          id: true,
          order: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProcessedChunk })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProcessedChunk(
    @common.Param() params: ProcessedChunkWhereUniqueInput
  ): Promise<ProcessedChunk | null> {
    try {
      return await this.service.deleteProcessedChunk({
        where: params,
        select: {
          chunk: true,
          createdAt: true,
          id: true,
          order: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
