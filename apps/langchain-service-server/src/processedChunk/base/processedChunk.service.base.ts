/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ProcessedChunk as PrismaProcessedChunk } from "@prisma/client";

export class ProcessedChunkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProcessedChunkCountArgs, "select">
  ): Promise<number> {
    return this.prisma.processedChunk.count(args);
  }

  async processedChunks(
    args: Prisma.ProcessedChunkFindManyArgs
  ): Promise<PrismaProcessedChunk[]> {
    return this.prisma.processedChunk.findMany(args);
  }
  async processedChunk(
    args: Prisma.ProcessedChunkFindUniqueArgs
  ): Promise<PrismaProcessedChunk | null> {
    return this.prisma.processedChunk.findUnique(args);
  }
  async createProcessedChunk(
    args: Prisma.ProcessedChunkCreateArgs
  ): Promise<PrismaProcessedChunk> {
    return this.prisma.processedChunk.create(args);
  }
  async updateProcessedChunk(
    args: Prisma.ProcessedChunkUpdateArgs
  ): Promise<PrismaProcessedChunk> {
    return this.prisma.processedChunk.update(args);
  }
  async deleteProcessedChunk(
    args: Prisma.ProcessedChunkDeleteArgs
  ): Promise<PrismaProcessedChunk> {
    return this.prisma.processedChunk.delete(args);
  }
}
