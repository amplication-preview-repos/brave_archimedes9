/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProcessedChunk } from "./ProcessedChunk";
import { ProcessedChunkCountArgs } from "./ProcessedChunkCountArgs";
import { ProcessedChunkFindManyArgs } from "./ProcessedChunkFindManyArgs";
import { ProcessedChunkFindUniqueArgs } from "./ProcessedChunkFindUniqueArgs";
import { CreateProcessedChunkArgs } from "./CreateProcessedChunkArgs";
import { UpdateProcessedChunkArgs } from "./UpdateProcessedChunkArgs";
import { DeleteProcessedChunkArgs } from "./DeleteProcessedChunkArgs";
import { ProcessedChunkService } from "../processedChunk.service";
@graphql.Resolver(() => ProcessedChunk)
export class ProcessedChunkResolverBase {
  constructor(protected readonly service: ProcessedChunkService) {}

  async _processedChunksMeta(
    @graphql.Args() args: ProcessedChunkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProcessedChunk])
  async processedChunks(
    @graphql.Args() args: ProcessedChunkFindManyArgs
  ): Promise<ProcessedChunk[]> {
    return this.service.processedChunks(args);
  }

  @graphql.Query(() => ProcessedChunk, { nullable: true })
  async processedChunk(
    @graphql.Args() args: ProcessedChunkFindUniqueArgs
  ): Promise<ProcessedChunk | null> {
    const result = await this.service.processedChunk(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProcessedChunk)
  async createProcessedChunk(
    @graphql.Args() args: CreateProcessedChunkArgs
  ): Promise<ProcessedChunk> {
    return await this.service.createProcessedChunk({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ProcessedChunk)
  async updateProcessedChunk(
    @graphql.Args() args: UpdateProcessedChunkArgs
  ): Promise<ProcessedChunk | null> {
    try {
      return await this.service.updateProcessedChunk({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProcessedChunk)
  async deleteProcessedChunk(
    @graphql.Args() args: DeleteProcessedChunkArgs
  ): Promise<ProcessedChunk | null> {
    try {
      return await this.service.deleteProcessedChunk(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
