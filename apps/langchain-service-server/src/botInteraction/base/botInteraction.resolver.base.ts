/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BotInteraction } from "./BotInteraction";
import { BotInteractionCountArgs } from "./BotInteractionCountArgs";
import { BotInteractionFindManyArgs } from "./BotInteractionFindManyArgs";
import { BotInteractionFindUniqueArgs } from "./BotInteractionFindUniqueArgs";
import { CreateBotInteractionArgs } from "./CreateBotInteractionArgs";
import { UpdateBotInteractionArgs } from "./UpdateBotInteractionArgs";
import { DeleteBotInteractionArgs } from "./DeleteBotInteractionArgs";
import { User } from "../../user/base/User";
import { BotInteractionService } from "../botInteraction.service";
@graphql.Resolver(() => BotInteraction)
export class BotInteractionResolverBase {
  constructor(protected readonly service: BotInteractionService) {}

  async _botInteractionsMeta(
    @graphql.Args() args: BotInteractionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BotInteraction])
  async botInteractions(
    @graphql.Args() args: BotInteractionFindManyArgs
  ): Promise<BotInteraction[]> {
    return this.service.botInteractions(args);
  }

  @graphql.Query(() => BotInteraction, { nullable: true })
  async botInteraction(
    @graphql.Args() args: BotInteractionFindUniqueArgs
  ): Promise<BotInteraction | null> {
    const result = await this.service.botInteraction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BotInteraction)
  async createBotInteraction(
    @graphql.Args() args: CreateBotInteractionArgs
  ): Promise<BotInteraction> {
    return await this.service.createBotInteraction({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => BotInteraction)
  async updateBotInteraction(
    @graphql.Args() args: UpdateBotInteractionArgs
  ): Promise<BotInteraction | null> {
    try {
      return await this.service.updateBotInteraction({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BotInteraction)
  async deleteBotInteraction(
    @graphql.Args() args: DeleteBotInteractionArgs
  ): Promise<BotInteraction | null> {
    try {
      return await this.service.deleteBotInteraction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: BotInteraction
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
