/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BotInteraction as PrismaBotInteraction,
  User as PrismaUser,
} from "@prisma/client";

export class BotInteractionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BotInteractionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.botInteraction.count(args);
  }

  async botInteractions(
    args: Prisma.BotInteractionFindManyArgs
  ): Promise<PrismaBotInteraction[]> {
    return this.prisma.botInteraction.findMany(args);
  }
  async botInteraction(
    args: Prisma.BotInteractionFindUniqueArgs
  ): Promise<PrismaBotInteraction | null> {
    return this.prisma.botInteraction.findUnique(args);
  }
  async createBotInteraction(
    args: Prisma.BotInteractionCreateArgs
  ): Promise<PrismaBotInteraction> {
    return this.prisma.botInteraction.create(args);
  }
  async updateBotInteraction(
    args: Prisma.BotInteractionUpdateArgs
  ): Promise<PrismaBotInteraction> {
    return this.prisma.botInteraction.update(args);
  }
  async deleteBotInteraction(
    args: Prisma.BotInteractionDeleteArgs
  ): Promise<PrismaBotInteraction> {
    return this.prisma.botInteraction.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.botInteraction
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
